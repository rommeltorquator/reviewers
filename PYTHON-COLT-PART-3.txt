ITERATORS GENERATORS


*** iterators vs iterables


- iterable = lists, strings, tuples, dictionary, sets
- iterable is capable of creating an iterator
- to be an iterable, you need to create your own iterator

dir(list) # this returns all properties and methods of an object

- every iterables have __iter__ method

- iter() and next() methods
names = ["Abby", "Mabel", "Steph"]
iter_obj = iter(names)

print(next(iter_obj))
print(next(iter_obj))
print(next(iter_obj))


*** writing our version of for loop


def my_for(itr):
  i = iter(itr) # iterator
  while True:
    try:
      print(next(i)) # iterating the list
    except StopIteration:
      break

my_for([1, 2, 3])

-----

names = ["Rommel", "Toshi"]

def show_names(i):
  it = iter(i)
  while True:
    try:
      print(next(it))
    except StopIteration:
      break

show_names("Rommel")


*** writing a custom iterator


class Customers:
  def __init__(self, names):
    self.names = names.split(' ')
    self.index = 0
  
  def __iter__(self):
    return self
  
  def __next__(self):
    if self.index >= len(self.names):
      raise StopIteration
    i = self.index
    self.index += 1
    return self.names[i]

custs = Customers("This is a sample iterator")
for x in custs:
  print(x)







go back to 27 - 269































































