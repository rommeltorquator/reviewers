ITERATORS GENERATORS


*** iterators vs iterables


- iterable = lists, strings, tuples, dictionary, sets
- iterable is capable of creating an iterator
- to be an iterable, you need to create your own iterator

dir(list) # this returns all properties and methods of an object

- every iterables have __iter__ method

- iter() and next() methods
names = ["Abby", "Mabel", "Steph"]
iter_obj = iter(names)

print(next(iter_obj))
print(next(iter_obj))
print(next(iter_obj))


*** writing our version of for loop


def my_for(itr):
  i = iter(itr) # iterator
  while True:
    try:
      print(next(i)) # iterating the list
    except StopIteration:
      break

my_for([1, 2, 3])

-----

names = ["Rommel", "Toshi"]

def show_names(i):
  it = iter(i)
  while True:
    try:
      print(next(it))
    except StopIteration:
      break

show_names("Rommel")


*** writing a custom iterator


class Customers:
  def __init__(self, names):
    self.names = names.split(' ')
    self.index = 0
  
  def __iter__(self):
    return self
  
  def __next__(self):
    if self.index >= len(self.names):
      raise StopIteration
    i = self.index
    self.index += 1
    return self.names[i]

custs = Customers("This is a sample iterator")
for x in custs:
  print(x)


*** go back to 269 for making our deck class iterable


*** GENERATORS go back to 27 - 270


- short way of creating iterators
- generators are iterator
- uses yield

def hit_next(i):
  for x in i:
    yield x

h = hit_next([1, 2, 3, 4, 5])
print(next(h))
print(next(h))
print(next(h))
print(next(h))
print(next(h))

---

def statement():
  s = "This is the first yield"
  yield s
  s = "This is the fucking second yield"
  yield s

s = statement()
print(next(s))
print(next(s))

- you can use for loop to loop through generators

def statement():
  s = "This is the first a yield"
  yield s
  s = "This is the fucking a second yield"
  yield s

s = statement()
for x in s: # use for loop to loop through yields
  print(x)


*** go back in 273 writing a beat making generator


*** generator expressions 


print((x for x in range(10))) # generator expression
print([x for x in range(10)])

- gen ex uses less memory than list comprehension and gen ex loads faster than list comprehension


DECORATORS


*** higher order function

- A function is called Higher Order Function if it contains other functions as a parameter or returns a function as an output
- You can store the function in a variable
- acceps function as an argument and returns a function as a value
- pass a function as an argument
- a function that returns a function

---

# We can pass funcs as args to other funcs

def sum(n, func):
	total = 0
	for num in range(1,n+1):
		total += func(num)
	return total

def square(x):
	return x*x

def cube(x):
	return x*x*x


print(sum(3,cube))
print(sum(3,square))

---

# We can return funcs from other funcs
from random import choice

def make_laugh_func():
    def get_laugh():
        l = choice(('HAHAHAH', 'lol', 'tehehe'))
        return l

    return get_laugh

laugh = make_laugh_func()
print(laugh())


*** decorators




















































